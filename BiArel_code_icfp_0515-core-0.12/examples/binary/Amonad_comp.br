let leq  = { contra : intR => intR => boolR , 0 } in
let addone = {contra : forall x [diff, 0] :: size. Bint [x]  => Bint [x+1] , 0 } in 

let eq = {lam x. if (fst x) then (if (snd x) then true else false)
       	     	else (if (snd x) then false else true) : ((U bool) X (U bool)) => U bool, 0} in
let boolAnd = {lam x. if (fst x) then (if (snd x) then true else false)
       	     	else (if (snd x) then false else false) : ((U bool) X (U bool)) => U bool, 0} in


fix comp (z). Lam. Lam. Lam. Lam. Lam. Lam. lam l1. lam l2. lam i. lam n. 
    if ( leq i n) then 
        letm a = { read l1 i : {g-> beta1, f-> beta2} g :  (U bool) , [diff, 0 ]  { g->beta1, f-> beta2  } , 0 } in
        letm b = { read l2 i : {g-> beta1, f-> beta2} f :  (U bool) , [diff, 0 ]  { g->beta1, f-> beta2  } , 0 } in
           letm r = { ( (celim (comp () [] [] [] [] [] []) ) l1 l2 (addone [] i) n )  :  {g-> beta1, f-> beta2} g :  (U bool) , [diff, 0 ]  { g->beta1, f-> beta2  }    , 0  } in 
          return ( boolAnd (  r , eq (a, b) ) )
    else
         return true


<= 0 : unitR  =>  forall I; N;  g [diff, 0] :: loc ; f [diff, 0] :: loc ; beta1 [diff, 0] :: Arr ; beta2 [diff, 0] :: Arr . {0 < I && I < N} => ( (array (g) [N]  (U bool)) => (array (f) [N]  (U bool))  => Bint[I] => Bint[N] => {g-> beta1, f-> beta2} g :  (U bool) , [diff, 0 ]  { g->beta1, f-> beta2  } )