let leq  = { contra : int  [min, 0]-> int [min, 0] -> bool , 0 } in
let addone = {contra : forall x [min, 0] :: size. Uint [x] [min, 0] -> Uint [x+1] , 0 } in 
fix map(f). Lam. Lam. Lam.  lam a. lam k. lam n.
 if ( leq k n) then
   letm x = { read a k : {g->io} g : int , [min,1]  { g->io  }, 0}
in
   letm b = { update a k (f x) : {g->io } g : unit , [min,2]  { g->io  }, 0 } in
     (celim (map (f) [] [] []) ) a (addone [] k)  n
else
return ()

<= [min, 0]  : (int [min, 0] -> int) [min,0] -> forall i [min, 0] :: size ; n [min , 0] :: size ; g [min, 0] :: loc . {i < n}=> ( (array (g) [n] int) 
 [min,0] ->  Uint[i] [min, 0 ]->   Uint[n] [min, 6*(n-i) ]->  {g-> io} g :  unit , [min,3*(n-i)]  { g->io  }  )
